{"ast":null,"code":"import React from 'react';\nimport throttle from 'lodash/throttle';\nconst events = new Set();\n\nconst onResize = () => events.forEach(fn => fn());\n\nconst useWindowSize = (options = {}) => {\n  const {\n    throttleMs = 100\n  } = options;\n  const [size, setSize] = React.useState({\n    width: false && window.innerWidth,\n    height: false && window.innerHeight\n  });\n  const handle = throttle(() => {\n    setSize({\n      width: false && window.innerWidth,\n      height: false && window.innerHeight\n    });\n  }, throttleMs);\n  React.useEffect(() => {\n    if (events.size === 0) {\n      window.addEventListener('resize', onResize, true);\n    }\n\n    events.add(handle);\n    return () => {\n      events.delete(handle);\n\n      if (events.size === 0) {\n        window.removeEventListener('resize', onResize, true);\n      }\n    };\n  }, []);\n  return size;\n};\n\nexport default useWindowSize;","map":{"version":3,"sources":["C:/Users/snowd/Desktop/isoadmin-330/admin/isomorphic/node_modules/@iso/lib/hooks/useWindowSize.js"],"names":["React","throttle","events","Set","onResize","forEach","fn","useWindowSize","options","throttleMs","size","setSize","useState","width","window","innerWidth","height","innerHeight","handle","useEffect","addEventListener","add","delete","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,MAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;AACA,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,OAAP,CAAeC,EAAE,IAAIA,EAAE,EAAvB,CAAvB;;AAEA,MAAMC,aAAa,GAAG,CAACC,OAAO,GAAG,EAAX,KAAkB;AACtC,QAAM;AAAEC,IAAAA,UAAU,GAAG;AAAf,MAAuBD,OAA7B;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBX,KAAK,CAACY,QAAN,CAAe;AACrCC,IAAAA,KAAK,EAAE,SAAmBC,MAAM,CAACC,UADI;AAErCC,IAAAA,MAAM,EAAE,SAAmBF,MAAM,CAACG;AAFG,GAAf,CAAxB;AAKA,QAAMC,MAAM,GAAGjB,QAAQ,CAAC,MAAM;AAC5BU,IAAAA,OAAO,CAAC;AACNE,MAAAA,KAAK,EAAE,SAAmBC,MAAM,CAACC,UAD3B;AAENC,MAAAA,MAAM,EAAE,SAAmBF,MAAM,CAACG;AAF5B,KAAD,CAAP;AAID,GALsB,EAKpBR,UALoB,CAAvB;AAOAT,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpB,QAAIjB,MAAM,CAACQ,IAAP,KAAgB,CAApB,EAAuB;AACrBI,MAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkChB,QAAlC,EAA4C,IAA5C;AACD;;AAEDF,IAAAA,MAAM,CAACmB,GAAP,CAAWH,MAAX;AAEA,WAAO,MAAM;AACXhB,MAAAA,MAAM,CAACoB,MAAP,CAAcJ,MAAd;;AAEA,UAAIhB,MAAM,CAACQ,IAAP,KAAgB,CAApB,EAAuB;AACrBI,QAAAA,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCnB,QAArC,EAA+C,IAA/C;AACD;AACF,KAND;AAOD,GAdD,EAcG,EAdH;AAgBA,SAAOM,IAAP;AACD,CA/BD;;AAiCA,eAAeH,aAAf","sourcesContent":["import React from 'react';\nimport throttle from 'lodash/throttle';\nconst events = new Set();\nconst onResize = () => events.forEach(fn => fn());\n\nconst useWindowSize = (options = {}) => {\n  const { throttleMs = 100 } = options;\n  const [size, setSize] = React.useState({\n    width: process.browser && window.innerWidth,\n    height: process.browser && window.innerHeight,\n  });\n\n  const handle = throttle(() => {\n    setSize({\n      width: process.browser && window.innerWidth,\n      height: process.browser && window.innerHeight,\n    });\n  }, throttleMs);\n\n  React.useEffect(() => {\n    if (events.size === 0) {\n      window.addEventListener('resize', onResize, true);\n    }\n\n    events.add(handle);\n\n    return () => {\n      events.delete(handle);\n\n      if (events.size === 0) {\n        window.removeEventListener('resize', onResize, true);\n      }\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n"]},"metadata":{},"sourceType":"module"}