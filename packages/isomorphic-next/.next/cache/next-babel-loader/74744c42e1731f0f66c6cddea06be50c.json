{"ast":null,"code":"import firebase, { auth } from './firebase';\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\nexport const githubProvider = new firebase.auth.GithubAuthProvider();\nexport const twitterProvider = new firebase.auth.TwitterAuthProvider();\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider).then(function (result) {\n  // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n  var token = result.credential.accessToken; // The signed-in user info.\n\n  var user = result.user;\n  console.log(`FB Token: ${token}`, `User: ${user}`); // ...\n}).catch(function (error) {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message; // The email of the user's account used.\n\n  var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n  var credential = error.credential;\n  console.error(error); // ...\n});\nexport const signInWithGithub = () => auth.signInWithPopup(githubProvider);\nexport const signInWithTwitter = () => auth.signInWithPopup(twitterProvider);\nexport const signInWithEmail = async (email, password) => await auth.signInWithEmailAndPassword(email, password);\nexport const signUpWithEmailAndPassword = async (email, password) => await auth.createUserWithEmailAndPassword(email, password);\nexport const resetPassword = email => auth.sendPasswordResetEmail(email);\nexport const signOut = () => auth.signOut();\nexport default auth; // async function signup(provider, info) {\n//   if (!this.isValid) {\n//     return;\n//   }\n//   try {\n//     switch (provider) {\n//       case this.EMAIL:\n//         return await firebaseAuth().createUserWithEmailAndPassword(\n//           info.email,\n//           info.password\n//         );\n//       default:\n//     }\n//   } catch (error) {\n//     return error;\n//   }\n// }\n\nasync function login(provider, info) {\n  try {\n    switch (provider) {\n      case this.EMAIL:\n        return await firebaseAuth().signInWithEmailAndPassword(info.email, info.password);\n\n      case this.FACEBOOK:\n        let fbAuthProvider = new firebaseAuth.FacebookAuthProvider();\n        return await firebaseAuth().signInWithPopup(fbAuthProvider);\n\n      case this.GOOGLE:\n        let googleAuthProvider = new firebaseAuth.GoogleAuthProvider();\n        return await firebaseAuth().signInWithPopup(googleAuthProvider);\n\n      case this.GITHUB:\n        let ghAuthProvider = new firebaseAuth.GithubAuthProvider();\n        return await firebaseAuth().signInWithPopup(ghAuthProvider);\n\n      case this.TWITTER:\n        let twitterAuthProvider = new firebaseAuth.TwitterAuthProvider();\n        return await firebaseAuth().signInWithPopup(twitterAuthProvider);\n\n      default:\n    }\n  } catch (error) {\n    return error;\n  }\n}","map":{"version":3,"sources":["C:/Users/snowd/Desktop/isoadmin-330/admin/isomorphic/node_modules/@iso/lib/firebase/firebase.authentication.util.js"],"names":["firebase","auth","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","userAuth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","facebookProvider","FacebookAuthProvider","githubProvider","GithubAuthProvider","twitterProvider","TwitterAuthProvider","signInWithGoogle","signInWithPopup","signInWithFacebook","then","result","token","credential","accessToken","user","console","log","catch","error","errorCode","code","errorMessage","message","email","signInWithGithub","signInWithTwitter","signInWithEmail","password","signInWithEmailAndPassword","signUpWithEmailAndPassword","createUserWithEmailAndPassword","resetPassword","sendPasswordResetEmail","signOut","login","provider","info","EMAIL","firebaseAuth","FACEBOOK","fbAuthProvider","GOOGLE","googleAuthProvider","GITHUB","ghAuthProvider","TWITTER","twitterAuthProvider"],"mappings":"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","sourcesContent":["import firebase, { auth } from './firebase';\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\nexport const githubProvider = new firebase.auth.GithubAuthProvider();\nexport const twitterProvider = new firebase.auth.TwitterAuthProvider();\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const signInWithFacebook = () =>\n  auth\n    .signInWithPopup(facebookProvider)\n    .then(function(result) {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      var token = result.credential.accessToken;\n      // The signed-in user info.\n      var user = result.user;\n      console.log(`FB Token: ${token}`, `User: ${user}`);\n\n      // ...\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      console.error(error);\n\n      // ...\n    });\nexport const signInWithGithub = () => auth.signInWithPopup(githubProvider);\nexport const signInWithTwitter = () => auth.signInWithPopup(twitterProvider);\nexport const signInWithEmail = async (email, password) =>\n  await auth.signInWithEmailAndPassword(email, password);\nexport const signUpWithEmailAndPassword = async (email, password) =>\n  await auth.createUserWithEmailAndPassword(email, password);\n\nexport const resetPassword = email => auth.sendPasswordResetEmail(email);\n\nexport const signOut = () => auth.signOut();\nexport default auth;\n// async function signup(provider, info) {\n//   if (!this.isValid) {\n//     return;\n//   }\n//   try {\n//     switch (provider) {\n//       case this.EMAIL:\n//         return await firebaseAuth().createUserWithEmailAndPassword(\n//           info.email,\n//           info.password\n//         );\n//       default:\n//     }\n//   } catch (error) {\n//     return error;\n//   }\n// }\n\nasync function login(provider, info) {\n  try {\n    switch (provider) {\n      case this.EMAIL:\n        return await firebaseAuth().signInWithEmailAndPassword(\n          info.email,\n          info.password\n        );\n      case this.FACEBOOK:\n        let fbAuthProvider = new firebaseAuth.FacebookAuthProvider();\n        return await firebaseAuth().signInWithPopup(fbAuthProvider);\n      case this.GOOGLE:\n        let googleAuthProvider = new firebaseAuth.GoogleAuthProvider();\n        return await firebaseAuth().signInWithPopup(googleAuthProvider);\n      case this.GITHUB:\n        let ghAuthProvider = new firebaseAuth.GithubAuthProvider();\n        return await firebaseAuth().signInWithPopup(ghAuthProvider);\n      case this.TWITTER:\n        let twitterAuthProvider = new firebaseAuth.TwitterAuthProvider();\n        return await firebaseAuth().signInWithPopup(twitterAuthProvider);\n      default:\n    }\n  } catch (error) {\n    return error;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}