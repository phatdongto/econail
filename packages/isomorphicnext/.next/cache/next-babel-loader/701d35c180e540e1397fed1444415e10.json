{"ast":null,"code":"import notification from '@iso/components/Notification';\n\nvar getChatRoom = function getChatRoom(chatRooms, receiverId) {\n  var selectedChatroom;\n  chatRooms.forEach(function (chatroom) {\n    if (chatroom.otherUserId === receiverId) {\n      selectedChatroom = chatroom;\n    }\n  });\n  return selectedChatroom;\n};\n\nvar actions = {\n  CHAT_INIT: 'CHAT_INIT',\n  CHAT_INIT_SAGA: 'CHAT_INIT_SAGA',\n  CHAT_UPDATE_CHATROOM: 'CHAT_UPDATE_CHATROOM',\n  CHAT_TOGGLE_COMPOSE: 'CHAT_TOGGLE_COMPOSE',\n  CHAT_SET_TOGGLE_VIEW_PROFILE: 'CHAT_SET_TOGGLE_VIEW_PROFILE',\n  CHAT_SET_TOGGLE_COMPOSED_ID: 'CHAT_SET_TOGGLE_COMPOSED_ID',\n  CHAT_SEND_MESSAGE: 'CHAT_SEND_MESSAGE',\n  CHAT_UPDATE_CHATROOM_SAGA: 'CHAT_UPDATE_CHATROOM_SAGA',\n  TOGGLE_MOBILE_LIST: 'TOGGLE_MOBILE_LIST',\n  TOGGLE_MOBILE_PROFILE: 'TOGGLE_MOBILE_PROFILE',\n  RESTORE_DEMO_DATA: 'RESTORE_DEMO_DATA',\n  RESTORE_DEMO_DATA_DONE: 'RESTORE_DEMO_DATA_DONE',\n  UPDATE_NEW_USER_PROPS: 'UPDATE_NEW_USER_PROPS',\n  ADD_NEW_USER: 'ADD_NEW_USER',\n  ADD_NEW_USER_SAGA: 'ADD_NEW_USER_SAGA',\n  NEW_MESSAGE_SUCCESFULL: 'NEW_MESSAGE_SUCCESFULL',\n  chatInit: function chatInit(userId) {\n    return {\n      type: actions.CHAT_INIT,\n      payload: {\n        userId: userId\n      }\n    };\n  },\n  toggleCompose: function toggleCompose() {\n    return {\n      type: actions.CHAT_TOGGLE_COMPOSE\n    };\n  },\n  toggleViewProfile: function toggleViewProfile(viewProfile) {\n    return {\n      type: actions.CHAT_SET_TOGGLE_VIEW_PROFILE,\n      viewProfile: viewProfile\n    };\n  },\n  setComposedId: function setComposedId(id) {\n    return {\n      type: actions.CHAT_SET_TOGGLE_COMPOSED_ID,\n      id: id\n    };\n  },\n  setSelectedChatroom: function setSelectedChatroom(chatRoom) {\n    return {\n      type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n      payload: {\n        chatRoom: chatRoom,\n        selected: true\n      }\n    };\n  },\n  // sendMessage: text => {\n  //   return (dispatch, getState) => {\n  //     const {\n  //       chatRooms,\n  //       composedId,\n  //       openCompose,\n  //       selectedChatRoom,\n  //     } = getState().Chat;\n  //     let chatRoom = selectedChatRoom;\n  //     if (openCompose) {\n  //       if (!composedId) {\n  //         notification('error', 'Please select receiver');\n  //         dispatch({ type: 'null' });\n  //       } else {\n  //         chatRoom = getChatRoom(chatRooms, composedId);\n  //       }\n  //     }\n  //     dispatch({\n  //       type: actions.CHAT_SEND_MESSAGE,\n  //       payload: { chatRoom, text, openCompose },\n  //     });\n  //   };\n  // },\n  sendMessage: function sendMessage(message) {\n    return {\n      type: actions.CHAT_SEND_MESSAGE,\n      payload: message\n    };\n  },\n  toggleMobileList: function toggleMobileList(mobileActiveList) {\n    return {\n      type: actions.TOGGLE_MOBILE_LIST,\n      mobileActiveList: mobileActiveList\n    };\n  },\n  toggleMobileProfile: function toggleMobileProfile(mobileActiveProfile) {\n    return {\n      type: actions.TOGGLE_MOBILE_PROFILE,\n      mobileActiveProfile: mobileActiveProfile\n    };\n  },\n  restoreData: function restoreData(demoData) {\n    return {\n      type: actions.RESTORE_DEMO_DATA,\n      demoData: demoData\n    };\n  },\n  updateNewUsersProp: function updateNewUsersProp(addNewUsersProp) {\n    return {\n      type: actions.UPDATE_NEW_USER_PROPS,\n      addNewUsersProp: addNewUsersProp\n    };\n  },\n  addNewUser: function addNewUser(user, addNewUsersProp) {\n    return {\n      type: actions.ADD_NEW_USER,\n      user: user,\n      addNewUsersProp: addNewUsersProp\n    };\n  }\n};\nexport default actions;","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/@iso/redux/chat/actions.js"],"names":["notification","getChatRoom","chatRooms","receiverId","selectedChatroom","forEach","chatroom","otherUserId","actions","CHAT_INIT","CHAT_INIT_SAGA","CHAT_UPDATE_CHATROOM","CHAT_TOGGLE_COMPOSE","CHAT_SET_TOGGLE_VIEW_PROFILE","CHAT_SET_TOGGLE_COMPOSED_ID","CHAT_SEND_MESSAGE","CHAT_UPDATE_CHATROOM_SAGA","TOGGLE_MOBILE_LIST","TOGGLE_MOBILE_PROFILE","RESTORE_DEMO_DATA","RESTORE_DEMO_DATA_DONE","UPDATE_NEW_USER_PROPS","ADD_NEW_USER","ADD_NEW_USER_SAGA","NEW_MESSAGE_SUCCESFULL","chatInit","userId","type","payload","toggleCompose","toggleViewProfile","viewProfile","setComposedId","id","setSelectedChatroom","chatRoom","selected","sendMessage","message","toggleMobileList","mobileActiveList","toggleMobileProfile","mobileActiveProfile","restoreData","demoData","updateNewUsersProp","addNewUsersProp","addNewUser","user"],"mappings":"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","sourcesContent":["import notification from '@iso/components/Notification';\r\n\r\nconst getChatRoom = (chatRooms, receiverId) => {\r\n  let selectedChatroom;\r\n  chatRooms.forEach(chatroom => {\r\n    if (chatroom.otherUserId === receiverId) {\r\n      selectedChatroom = chatroom;\r\n    }\r\n  });\r\n  return selectedChatroom;\r\n};\r\nconst actions = {\r\n  CHAT_INIT: 'CHAT_INIT',\r\n  CHAT_INIT_SAGA: 'CHAT_INIT_SAGA',\r\n  CHAT_UPDATE_CHATROOM: 'CHAT_UPDATE_CHATROOM',\r\n  CHAT_TOGGLE_COMPOSE: 'CHAT_TOGGLE_COMPOSE',\r\n  CHAT_SET_TOGGLE_VIEW_PROFILE: 'CHAT_SET_TOGGLE_VIEW_PROFILE',\r\n  CHAT_SET_TOGGLE_COMPOSED_ID: 'CHAT_SET_TOGGLE_COMPOSED_ID',\r\n  CHAT_SEND_MESSAGE: 'CHAT_SEND_MESSAGE',\r\n  CHAT_UPDATE_CHATROOM_SAGA: 'CHAT_UPDATE_CHATROOM_SAGA',\r\n  TOGGLE_MOBILE_LIST: 'TOGGLE_MOBILE_LIST',\r\n  TOGGLE_MOBILE_PROFILE: 'TOGGLE_MOBILE_PROFILE',\r\n  RESTORE_DEMO_DATA: 'RESTORE_DEMO_DATA',\r\n  RESTORE_DEMO_DATA_DONE: 'RESTORE_DEMO_DATA_DONE',\r\n  UPDATE_NEW_USER_PROPS: 'UPDATE_NEW_USER_PROPS',\r\n  ADD_NEW_USER: 'ADD_NEW_USER',\r\n  ADD_NEW_USER_SAGA: 'ADD_NEW_USER_SAGA',\r\n  NEW_MESSAGE_SUCCESFULL: 'NEW_MESSAGE_SUCCESFULL',\r\n  chatInit: userId => ({\r\n    type: actions.CHAT_INIT,\r\n    payload: { userId },\r\n  }),\r\n  toggleCompose: () => ({ type: actions.CHAT_TOGGLE_COMPOSE }),\r\n  toggleViewProfile: viewProfile => ({\r\n    type: actions.CHAT_SET_TOGGLE_VIEW_PROFILE,\r\n    viewProfile,\r\n  }),\r\n  setComposedId: id => ({ type: actions.CHAT_SET_TOGGLE_COMPOSED_ID, id }),\r\n  setSelectedChatroom: chatRoom => ({\r\n    type: actions.CHAT_UPDATE_CHATROOM_SAGA,\r\n    payload: { chatRoom, selected: true },\r\n  }),\r\n  // sendMessage: text => {\r\n  //   return (dispatch, getState) => {\r\n  //     const {\r\n  //       chatRooms,\r\n  //       composedId,\r\n  //       openCompose,\r\n  //       selectedChatRoom,\r\n  //     } = getState().Chat;\r\n  //     let chatRoom = selectedChatRoom;\r\n\r\n  //     if (openCompose) {\r\n  //       if (!composedId) {\r\n  //         notification('error', 'Please select receiver');\r\n  //         dispatch({ type: 'null' });\r\n  //       } else {\r\n  //         chatRoom = getChatRoom(chatRooms, composedId);\r\n  //       }\r\n  //     }\r\n  //     dispatch({\r\n  //       type: actions.CHAT_SEND_MESSAGE,\r\n  //       payload: { chatRoom, text, openCompose },\r\n  //     });\r\n  //   };\r\n  // },\r\n  sendMessage: message => ({\r\n    type: actions.CHAT_SEND_MESSAGE,\r\n    payload: message,\r\n  }),\r\n  toggleMobileList: mobileActiveList => ({\r\n    type: actions.TOGGLE_MOBILE_LIST,\r\n    mobileActiveList,\r\n  }),\r\n  toggleMobileProfile: mobileActiveProfile => ({\r\n    type: actions.TOGGLE_MOBILE_PROFILE,\r\n    mobileActiveProfile,\r\n  }),\r\n  restoreData: demoData => ({\r\n    type: actions.RESTORE_DEMO_DATA,\r\n    demoData,\r\n  }),\r\n  updateNewUsersProp: addNewUsersProp => ({\r\n    type: actions.UPDATE_NEW_USER_PROPS,\r\n    addNewUsersProp,\r\n  }),\r\n  addNewUser: (user, addNewUsersProp) => ({\r\n    type: actions.ADD_NEW_USER,\r\n    user,\r\n    addNewUsersProp,\r\n  }),\r\n};\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}