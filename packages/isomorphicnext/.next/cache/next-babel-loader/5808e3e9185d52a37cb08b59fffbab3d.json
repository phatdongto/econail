{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// saga.js\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\nimport scrumBoardActions from './actions';\nimport DemoData from './data';\nimport { loadState, saveState } from '@iso/lib/helpers/localStorage';\n\nconst getScrumBoards = state => state.scrumBoard;\n\nfunction* boardsRenderEffectSaga() {\n  let boards;\n  let columns;\n  let tasks;\n\n  if (localStorage.hasOwnProperty('scrum_boards')) {\n    const scrum_boards = loadState('scrum_boards');\n    boards = scrum_boards.boards;\n    columns = scrum_boards.columns;\n    tasks = scrum_boards.tasks;\n  } else {\n    boards = DemoData.boards;\n    columns = DemoData.columns;\n    tasks = DemoData.tasks;\n  }\n\n  saveState('scrum_boards', {\n    boards,\n    columns,\n    tasks\n  });\n  yield put(scrumBoardActions.setBoardsData({\n    boards,\n    columns,\n    tasks\n  }));\n}\n\nfunction* boardRenderEffectSaga({\n  payload\n}) {\n  let scrum_boards;\n  let boards;\n  let columns;\n  let tasks;\n\n  if (localStorage.hasOwnProperty('scrum_boards')) {\n    scrum_boards = loadState('scrum_boards');\n    boards = scrum_boards.boards;\n    columns = scrum_boards.columns;\n    tasks = scrum_boards.tasks;\n  } else {\n    scrum_boards = DemoData;\n    boards = DemoData.boards;\n    columns = DemoData.columns;\n    tasks = DemoData.tasks;\n  }\n\n  yield put(scrumBoardActions.setBoardData({\n    boards,\n    columns,\n    tasks\n  }));\n}\n\nfunction* createOrUpdateBoardEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, {\n    [action.payload.id]: action.payload\n  });\n\n  scrum_boards = {\n    columns: scrum_boards.columns,\n    tasks: scrum_boards.tasks,\n    boards: boards\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.createOrUpdateBoard(boards));\n}\n\nfunction* deleteBoardEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const BOARDS = _objectSpread({}, scrum_boards.boards);\n\n  delete BOARDS[action.payload];\n  const boards = BOARDS;\n  scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n    boards\n  });\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.deleteBoard(boards));\n}\n\nfunction* createOrUpdateColumnEffectSaga({\n  payload: {\n    column,\n    board_id\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n  console.log(column, board_id);\n\n  const columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, {\n    [column.id]: _objectSpread(_objectSpread({}, column), {}, {\n      editing: false\n    })\n  });\n\n  let boards = scrum_boards.boards;\n\n  if (!column.editing) {\n    boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, {\n      [board_id]: _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n        column_orders: [...scrum_boards.boards[board_id].column_orders, column.id]\n      })\n    });\n  }\n\n  scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n    columns,\n    boards\n  });\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.createOrUpdateColumn({\n    columns,\n    boards\n  }));\n}\n\nfunction* deleteColumnEffectSaga({\n  payload: {\n    column_id,\n    board_id\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const COLUMNS = _objectSpread({}, scrum_boards.columns);\n\n  delete COLUMNS[column_id];\n  const columns = COLUMNS;\n\n  const boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, {\n    [board_id]: _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n      column_orders: scrum_boards.boards[board_id].column_orders.filter(order => order !== column_id)\n    })\n  });\n\n  scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n    columns,\n    boards\n  });\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.deleteColumn({\n    columns,\n    boards\n  }));\n}\n\nfunction* moveColumnEffectSaga({\n  payload: {\n    board_id,\n    column_orders\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const boards = _objectSpread(_objectSpread({}, scrum_boards.boards), {}, {\n    [board_id]: _objectSpread(_objectSpread({}, scrum_boards.boards[board_id]), {}, {\n      column_orders: column_orders\n    })\n  });\n\n  scrum_boards = _objectSpread(_objectSpread({}, scrum_boards), {}, {\n    boards: boards\n  });\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.setMovedColumn(boards));\n}\n\nfunction* createOrUpdateTaskEffectSaga(action) {\n  let scrum_boards = yield select(getScrumBoards);\n\n  const tasks = _objectSpread(_objectSpread({}, scrum_boards.tasks), {}, {\n    [action.payload.id]: _objectSpread(_objectSpread({}, action.payload), {}, {\n      editing: false\n    })\n  });\n\n  let columns = scrum_boards.columns;\n\n  if (!action.payload.editing) {\n    columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, {\n      [action.payload.column_id]: _objectSpread(_objectSpread({}, scrum_boards.columns[action.payload.column_id]), {}, {\n        task_orders: [...scrum_boards.columns[action.payload.column_id].task_orders, action.payload.id]\n      })\n    });\n  }\n\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.createOrUpdateTask({\n    tasks,\n    columns\n  }));\n}\n\nfunction* deleteTaskEffectSaga({\n  payload: {\n    task_id,\n    column_id\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n  const tasks = Object.keys(scrum_boards.tasks).reduce((object, key) => {\n    if (key !== task_id) {\n      object[key] = scrum_boards.tasks[key];\n    }\n\n    return object;\n  }, {});\n\n  const columns = _objectSpread(_objectSpread({}, scrum_boards.columns), {}, {\n    [column_id]: _objectSpread(_objectSpread({}, scrum_boards.columns[column_id]), {}, {\n      task_orders: scrum_boards.columns[column_id].task_orders.filter(order => order !== task_id)\n    })\n  });\n\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.deleteTask({\n    columns,\n    tasks\n  }));\n}\n\nfunction* moveTaskEffectSaga({\n  payload: {\n    tasks,\n    columns\n  }\n}) {\n  let scrum_boards = yield select(getScrumBoards);\n  scrum_boards = {\n    columns: columns,\n    tasks: tasks,\n    boards: scrum_boards.boards\n  };\n  saveState('scrum_boards', scrum_boards);\n  yield put(scrumBoardActions.setMovedTask({\n    columns,\n    tasks\n  }));\n}\n\nexport default function* scrumBoardSaga() {\n  yield all([takeEvery(scrumBoardActions.LOAD_BOARDS_DATA_SAGA, boardsRenderEffectSaga), takeEvery(scrumBoardActions.LOAD_CURRENT_BOARD_DATA_SAGA, boardRenderEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_BOARD_WATCHER, createOrUpdateBoardEffectSaga), takeEvery(scrumBoardActions.DELETE_BOARD_WATCHER, deleteBoardEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_COLUMN_WATCHER, createOrUpdateColumnEffectSaga), takeEvery(scrumBoardActions.DELETE_COLUMN_WATCHER, deleteColumnEffectSaga), takeEvery(scrumBoardActions.MOVE_COLUMN_WATCHER, moveColumnEffectSaga), takeEvery(scrumBoardActions.CREATE_OR_UPDATE_TASK_WATCHER, createOrUpdateTaskEffectSaga), takeEvery(scrumBoardActions.DELETE_TASK_WATCHER, deleteTaskEffectSaga), takeEvery(scrumBoardActions.MOVE_TASK_WATCHER, moveTaskEffectSaga)]);\n}","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/@iso/redux/scrumBoard/saga.js"],"names":["all","takeEvery","put","select","scrumBoardActions","DemoData","loadState","saveState","getScrumBoards","state","scrumBoard","boardsRenderEffectSaga","boards","columns","tasks","localStorage","hasOwnProperty","scrum_boards","setBoardsData","boardRenderEffectSaga","payload","setBoardData","createOrUpdateBoardEffectSaga","action","id","createOrUpdateBoard","deleteBoardEffectSaga","BOARDS","deleteBoard","createOrUpdateColumnEffectSaga","column","board_id","console","log","editing","column_orders","createOrUpdateColumn","deleteColumnEffectSaga","column_id","COLUMNS","filter","order","deleteColumn","moveColumnEffectSaga","setMovedColumn","createOrUpdateTaskEffectSaga","task_orders","createOrUpdateTask","deleteTaskEffectSaga","task_id","Object","keys","reduce","object","key","deleteTask","moveTaskEffectSaga","setMovedTask","scrumBoardSaga","LOAD_BOARDS_DATA_SAGA","LOAD_CURRENT_BOARD_DATA_SAGA","CREATE_OR_UPDATE_BOARD_WATCHER","DELETE_BOARD_WATCHER","CREATE_OR_UPDATE_COLUMN_WATCHER","DELETE_COLUMN_WATCHER","MOVE_COLUMN_WATCHER","CREATE_OR_UPDATE_TASK_WATCHER","DELETE_TASK_WATCHER","MOVE_TASK_WATCHER"],"mappings":"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","sourcesContent":["// saga.js\r\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\r\nimport scrumBoardActions from './actions';\r\nimport DemoData from './data';\r\nimport { loadState, saveState } from '@iso/lib/helpers/localStorage';\r\n\r\nconst getScrumBoards = state => state.scrumBoard;\r\n\r\nfunction* boardsRenderEffectSaga() {\r\n  let boards;\r\n  let columns;\r\n  let tasks;\r\n  if (localStorage.hasOwnProperty('scrum_boards')) {\r\n    const scrum_boards = loadState('scrum_boards');\r\n    boards = scrum_boards.boards;\r\n    columns = scrum_boards.columns;\r\n    tasks = scrum_boards.tasks;\r\n  } else {\r\n    boards = DemoData.boards;\r\n    columns = DemoData.columns;\r\n    tasks = DemoData.tasks;\r\n  }\r\n  saveState('scrum_boards', { boards, columns, tasks });\r\n  yield put(scrumBoardActions.setBoardsData({ boards, columns, tasks }));\r\n}\r\n\r\nfunction* boardRenderEffectSaga({ payload }) {\r\n  let scrum_boards;\r\n  let boards;\r\n  let columns;\r\n  let tasks;\r\n  if (localStorage.hasOwnProperty('scrum_boards')) {\r\n    scrum_boards = loadState('scrum_boards');\r\n    boards = scrum_boards.boards;\r\n    columns = scrum_boards.columns;\r\n    tasks = scrum_boards.tasks;\r\n  } else {\r\n    scrum_boards = DemoData;\r\n    boards = DemoData.boards;\r\n    columns = DemoData.columns;\r\n    tasks = DemoData.tasks;\r\n  }\r\n\r\n  yield put(\r\n    scrumBoardActions.setBoardData({\r\n      boards,\r\n      columns,\r\n      tasks,\r\n    })\r\n  );\r\n}\r\nfunction* createOrUpdateBoardEffectSaga(action) {\r\n  let scrum_boards = yield select(getScrumBoards);\r\n  const boards = {\r\n    ...scrum_boards.boards,\r\n    [action.payload.id]: action.payload,\r\n  };\r\n  scrum_boards = {\r\n    columns: scrum_boards.columns,\r\n    tasks: scrum_boards.tasks,\r\n    boards: boards,\r\n  };\r\n  saveState('scrum_boards', scrum_boards);\r\n\r\n  yield put(scrumBoardActions.createOrUpdateBoard(boards));\r\n}\r\n\r\nfunction* deleteBoardEffectSaga(action) {\r\n  let scrum_boards = yield select(getScrumBoards);\r\n  const BOARDS = {\r\n    ...scrum_boards.boards,\r\n  };\r\n  delete BOARDS[action.payload];\r\n\r\n  const boards = BOARDS;\r\n\r\n  scrum_boards = {\r\n    ...scrum_boards,\r\n    boards,\r\n  };\r\n  saveState('scrum_boards', scrum_boards);\r\n\r\n  yield put(scrumBoardActions.deleteBoard(boards));\r\n}\r\n\r\nfunction* createOrUpdateColumnEffectSaga({ payload: { column, board_id } }) {\r\n  let scrum_boards = yield select(getScrumBoards);\r\n  console.log(column, board_id);\r\n  const columns = {\r\n    ...scrum_boards.columns,\r\n    [column.id]: {\r\n      ...column,\r\n      editing: false,\r\n    },\r\n  };\r\n  let boards = scrum_boards.boards;\r\n  if (!column.editing) {\r\n    boards = {\r\n      ...scrum_boards.boards,\r\n      [board_id]: {\r\n        ...scrum_boards.boards[board_id],\r\n        column_orders: [\r\n          ...scrum_boards.boards[board_id].column_orders,\r\n          column.id,\r\n        ],\r\n      },\r\n    };\r\n  }\r\n  scrum_boards = {\r\n    ...scrum_boards,\r\n    columns,\r\n    boards,\r\n  };\r\n  saveState('scrum_boards', scrum_boards);\r\n  yield put(scrumBoardActions.createOrUpdateColumn({ columns, boards }));\r\n}\r\n\r\nfunction* deleteColumnEffectSaga({ payload: { column_id, board_id } }) {\r\n  let scrum_boards = yield select(getScrumBoards);\r\n  const COLUMNS = {\r\n    ...scrum_boards.columns,\r\n  };\r\n  delete COLUMNS[column_id];\r\n\r\n  const columns = COLUMNS;\r\n  const boards = {\r\n    ...scrum_boards.boards,\r\n    [board_id]: {\r\n      ...scrum_boards.boards[board_id],\r\n      column_orders: scrum_boards.boards[board_id].column_orders.filter(\r\n        order => order !== column_id\r\n      ),\r\n    },\r\n  };\r\n\r\n  scrum_boards = {\r\n    ...scrum_boards,\r\n    columns,\r\n    boards,\r\n  };\r\n  saveState('scrum_boards', scrum_boards);\r\n\r\n  yield put(scrumBoardActions.deleteColumn({ columns, boards }));\r\n}\r\n\r\nfunction* moveColumnEffectSaga({ payload: { board_id, column_orders } }) {\r\n  let scrum_boards = yield select(getScrumBoards);\r\n  const boards = {\r\n    ...scrum_boards.boards,\r\n    [board_id]: {\r\n      ...scrum_boards.boards[board_id],\r\n      column_orders: column_orders,\r\n    },\r\n  };\r\n  scrum_boards = {\r\n    ...scrum_boards,\r\n    boards: boards,\r\n  };\r\n  saveState('scrum_boards', scrum_boards);\r\n\r\n  yield put(scrumBoardActions.setMovedColumn(boards));\r\n}\r\n\r\nfunction* createOrUpdateTaskEffectSaga(action) {\r\n  let scrum_boards = yield select(getScrumBoards);\r\n  const tasks = {\r\n    ...scrum_boards.tasks,\r\n    [action.payload.id]: { ...action.payload, editing: false },\r\n  };\r\n  let columns = scrum_boards.columns;\r\n  if (!action.payload.editing) {\r\n    columns = {\r\n      ...scrum_boards.columns,\r\n      [action.payload.column_id]: {\r\n        ...scrum_boards.columns[action.payload.column_id],\r\n        task_orders: [\r\n          ...scrum_boards.columns[action.payload.column_id].task_orders,\r\n          action.payload.id,\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  scrum_boards = {\r\n    columns: columns,\r\n    tasks: tasks,\r\n    boards: scrum_boards.boards,\r\n  };\r\n  saveState('scrum_boards', scrum_boards);\r\n\r\n  yield put(scrumBoardActions.createOrUpdateTask({ tasks, columns }));\r\n}\r\n\r\nfunction* deleteTaskEffectSaga({ payload: { task_id, column_id } }) {\r\n  let scrum_boards = yield select(getScrumBoards);\r\n  const tasks = Object.keys(scrum_boards.tasks).reduce((object, key) => {\r\n    if (key !== task_id) {\r\n      object[key] = scrum_boards.tasks[key];\r\n    }\r\n    return object;\r\n  }, {});\r\n  const columns = {\r\n    ...scrum_boards.columns,\r\n    [column_id]: {\r\n      ...scrum_boards.columns[column_id],\r\n      task_orders: scrum_boards.columns[column_id].task_orders.filter(\r\n        order => order !== task_id\r\n      ),\r\n    },\r\n  };\r\n  scrum_boards = {\r\n    columns: columns,\r\n    tasks: tasks,\r\n    boards: scrum_boards.boards,\r\n  };\r\n  saveState('scrum_boards', scrum_boards);\r\n  yield put(scrumBoardActions.deleteTask({ columns, tasks }));\r\n}\r\n\r\nfunction* moveTaskEffectSaga({ payload: { tasks, columns } }) {\r\n  let scrum_boards = yield select(getScrumBoards);\r\n  scrum_boards = {\r\n    columns: columns,\r\n    tasks: tasks,\r\n    boards: scrum_boards.boards,\r\n  };\r\n  saveState('scrum_boards', scrum_boards);\r\n  yield put(scrumBoardActions.setMovedTask({ columns, tasks }));\r\n}\r\n\r\nexport default function* scrumBoardSaga() {\r\n  yield all([\r\n    takeEvery(scrumBoardActions.LOAD_BOARDS_DATA_SAGA, boardsRenderEffectSaga),\r\n    takeEvery(\r\n      scrumBoardActions.LOAD_CURRENT_BOARD_DATA_SAGA,\r\n      boardRenderEffectSaga\r\n    ),\r\n    takeEvery(\r\n      scrumBoardActions.CREATE_OR_UPDATE_BOARD_WATCHER,\r\n      createOrUpdateBoardEffectSaga\r\n    ),\r\n    takeEvery(scrumBoardActions.DELETE_BOARD_WATCHER, deleteBoardEffectSaga),\r\n    takeEvery(\r\n      scrumBoardActions.CREATE_OR_UPDATE_COLUMN_WATCHER,\r\n      createOrUpdateColumnEffectSaga\r\n    ),\r\n    takeEvery(scrumBoardActions.DELETE_COLUMN_WATCHER, deleteColumnEffectSaga),\r\n    takeEvery(scrumBoardActions.MOVE_COLUMN_WATCHER, moveColumnEffectSaga),\r\n    takeEvery(\r\n      scrumBoardActions.CREATE_OR_UPDATE_TASK_WATCHER,\r\n      createOrUpdateTaskEffectSaga\r\n    ),\r\n    takeEvery(scrumBoardActions.DELETE_TASK_WATCHER, deleteTaskEffectSaga),\r\n    takeEvery(scrumBoardActions.MOVE_TASK_WATCHER, moveTaskEffectSaga),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}