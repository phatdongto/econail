{"ast":null,"code":"import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nexport const per_page = 10;\nconst gitSearchApi = `https://api.github.com/search/repositories?per_page=${per_page}&q=`;\n\nconst onSearchReqeust = async (searcText, page = 1) => await fetch(`${gitSearchApi}${encodeURIComponent(searcText)}&page=${page}`).then(res => res.json()).then(res => res).catch(error => error);\n\nfunction* searchRequest({\n  payload\n}) {\n  const {\n    searcText,\n    page\n  } = payload;\n\n  try {\n    const searchResult = yield call(onSearchReqeust, searcText, page);\n\n    if (searchResult.items && searchResult.total_count) {\n      yield put(actions.gitSearchSuccess(searchResult.items, searchResult.total_count, page));\n    } else {\n      yield put(actions.gitSearchSuccess());\n    }\n  } catch (error) {\n    yield put(actions.gitSearchSuccess());\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.GIT_SEARCH, searchRequest)]);\n}","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/@iso/redux/githubSearch/sagas.js"],"names":["all","takeEvery","put","call","actions","per_page","gitSearchApi","onSearchReqeust","searcText","page","fetch","encodeURIComponent","then","res","json","catch","error","searchRequest","payload","searchResult","items","total_count","gitSearchSuccess","rootSaga","GIT_SEARCH"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,MAAMC,QAAQ,GAAG,EAAjB;AACP,MAAMC,YAAY,GAAI,uDAAsDD,QAAS,KAArF;;AAEA,MAAME,eAAe,GAAG,OAAOC,SAAP,EAAkBC,IAAI,GAAG,CAAzB,KACtB,MAAMC,KAAK,CAAE,GAAEJ,YAAa,GAAEK,kBAAkB,CAACH,SAAD,CAAY,SAAQC,IAAK,EAA9D,CAAL,CACHG,IADG,CACEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADT,EAEHF,IAFG,CAEEC,GAAG,IAAIA,GAFT,EAGHE,KAHG,CAGGC,KAAK,IAAIA,KAHZ,CADR;;AAMA,UAAUC,aAAV,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAqC;AACnC,QAAM;AAAEV,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAsBS,OAA5B;;AACA,MAAI;AACF,UAAMC,YAAY,GAAG,MAAMhB,IAAI,CAACI,eAAD,EAAkBC,SAAlB,EAA6BC,IAA7B,CAA/B;;AACA,QAAIU,YAAY,CAACC,KAAb,IAAsBD,YAAY,CAACE,WAAvC,EAAoD;AAClD,YAAMnB,GAAG,CACPE,OAAO,CAACkB,gBAAR,CACEH,YAAY,CAACC,KADf,EAEED,YAAY,CAACE,WAFf,EAGEZ,IAHF,CADO,CAAT;AAOD,KARD,MAQO;AACL,YAAMP,GAAG,CAACE,OAAO,CAACkB,gBAAR,EAAD,CAAT;AACD;AACF,GAbD,CAaE,OAAON,KAAP,EAAc;AACd,UAAMd,GAAG,CAACE,OAAO,CAACkB,gBAAR,EAAD,CAAT;AACD;AACF;;AACD,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMvB,GAAG,CAAC,CAACC,SAAS,CAACG,OAAO,CAACoB,UAAT,EAAqBP,aAArB,CAAV,CAAD,CAAT;AACD","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects';\r\nimport actions from './actions';\r\nexport const per_page = 10;\r\nconst gitSearchApi = `https://api.github.com/search/repositories?per_page=${per_page}&q=`;\r\n\r\nconst onSearchReqeust = async (searcText, page = 1) =>\r\n  await fetch(`${gitSearchApi}${encodeURIComponent(searcText)}&page=${page}`)\r\n    .then(res => res.json())\r\n    .then(res => res)\r\n    .catch(error => error);\r\n\r\nfunction* searchRequest({ payload }) {\r\n  const { searcText, page } = payload;\r\n  try {\r\n    const searchResult = yield call(onSearchReqeust, searcText, page);\r\n    if (searchResult.items && searchResult.total_count) {\r\n      yield put(\r\n        actions.gitSearchSuccess(\r\n          searchResult.items,\r\n          searchResult.total_count,\r\n          page\r\n        )\r\n      );\r\n    } else {\r\n      yield put(actions.gitSearchSuccess());\r\n    }\r\n  } catch (error) {\r\n    yield put(actions.gitSearchSuccess());\r\n  }\r\n}\r\nexport default function* rootSaga() {\r\n  yield all([takeEvery(actions.GIT_SEARCH, searchRequest)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}