{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport clone from 'clone';\nimport actions from './actions';\nconst initState = {\n  loadingInitData: false,\n  view: 'gridView',\n  viewTopbarCart: false,\n  productQuantity: [],\n  products: {}\n};\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case actions.INIT_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loadingInitData: true,\n        productQuantity: action.payload.productQuantity,\n        products: action.payload.products\n      });\n\n    case actions.CHANGE_VIEW:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        view: action.view\n      });\n\n    case actions.VIEW_TOPBAR_CART:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        viewTopbarCart: action.viewTopbarCart\n      });\n\n    case actions.UPDATE_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: clone(action.products),\n        productQuantity: clone(action.productQuantity)\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/@iso/redux/ecommerce/reducer.js"],"names":["clone","actions","initState","loadingInitData","view","viewTopbarCart","productQuantity","products","state","action","type","INIT_DATA","payload","CHANGE_VIEW","VIEW_TOPBAR_CART","UPDATE_DATA"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,eAAe,EAAE,KADD;AAEhBC,EAAAA,IAAI,EAAE,UAFU;AAGhBC,EAAAA,cAAc,EAAE,KAHA;AAIhBC,EAAAA,eAAe,EAAE,EAJD;AAKhBC,EAAAA,QAAQ,EAAE;AALM,CAAlB;AAOA,gBAAe,CAACC,KAAK,GAAGN,SAAT,EAAoBO,MAApB,KAA+B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,OAAO,CAACU,SAAb;AACE,6CACKH,KADL;AAEEL,QAAAA,eAAe,EAAE,IAFnB;AAGEG,QAAAA,eAAe,EAAEG,MAAM,CAACG,OAAP,CAAeN,eAHlC;AAIEC,QAAAA,QAAQ,EAAEE,MAAM,CAACG,OAAP,CAAeL;AAJ3B;;AAMF,SAAKN,OAAO,CAACY,WAAb;AACE,6CACKL,KADL;AAEEJ,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAFf;;AAIF,SAAKH,OAAO,CAACa,gBAAb;AACE,6CACKN,KADL;AAEEH,QAAAA,cAAc,EAAEI,MAAM,CAACJ;AAFzB;;AAIF,SAAKJ,OAAO,CAACc,WAAb;AACE,6CACKP,KADL;AAEED,QAAAA,QAAQ,EAAEP,KAAK,CAACS,MAAM,CAACF,QAAR,CAFjB;AAGED,QAAAA,eAAe,EAAEN,KAAK,CAACS,MAAM,CAACH,eAAR;AAHxB;;AAKF;AACE,aAAOE,KAAP;AAzBJ;AA2BD,CA5BD","sourcesContent":["import clone from 'clone';\r\nimport actions from './actions';\r\n\r\nconst initState = {\r\n  loadingInitData: false,\r\n  view: 'gridView',\r\n  viewTopbarCart: false,\r\n  productQuantity: [],\r\n  products: {},\r\n};\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actions.INIT_DATA:\r\n      return {\r\n        ...state,\r\n        loadingInitData: true,\r\n        productQuantity: action.payload.productQuantity,\r\n        products: action.payload.products,\r\n      };\r\n    case actions.CHANGE_VIEW:\r\n      return {\r\n        ...state,\r\n        view: action.view,\r\n      };\r\n    case actions.VIEW_TOPBAR_CART:\r\n      return {\r\n        ...state,\r\n        viewTopbarCart: action.viewTopbarCart,\r\n      };\r\n    case actions.UPDATE_DATA:\r\n      return {\r\n        ...state,\r\n        products: clone(action.products),\r\n        productQuantity: clone(action.productQuantity),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}