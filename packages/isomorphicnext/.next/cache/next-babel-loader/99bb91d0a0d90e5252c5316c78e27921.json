{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { db } from './firebase';\nexport function convertCollectionsSnapshotToMap(snapshots) {\n  return snapshots.docs.reduce((accumulator, collection) => {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\nexport async function getNewDocRef(collectionName) {\n  return await db.collection(collectionName).doc();\n}\nexport async function addDocument(collectionName, documentData) {\n  return await db.collection(collectionName).add(documentData).then(docRef => docRef.id);\n}\nexport async function setDocument(collectionName, docRef, documentData) {\n  return await db.collection(collectionName).doc(docRef).set(documentData);\n}\nexport async function getDocuments(collectionName) {\n  return await db.collection(collectionName).get().then(querySnapshot => querySnapshot.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data())));\n}\nexport async function getDocumentsByQuery(collectionName, query) {\n  console.log(...query, collectionName, 'test');\n  return await db.collection(collectionName).where(...query).get().then(querySnapshot => querySnapshot.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data())));\n}\nexport async function deleteDocuments(collectionName) {\n  const collectionRef = db.collection(collectionName);\n  var batch = db.batch();\n  await collectionRef.get().then(querySnapshot => querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id))));\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!');\n  });\n}\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = db.collection(collectionKey);\n  const batch = db.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!');\n  });\n}; // const { title, items } = doc.data();\n//     return {\n//       routeName: encodeURI(title.toLowerCase()),\n//       id: doc.id,\n//       title,\n//       items,\n//     };\n//   });\n//   console.log(transformedCollection);\n//   return transformedCollection.reduce((accumulator, collection) => {\n//     accumulator[collection.title.toLowerCase()] = collection;\n//     return accumulator;\n//   }, {});","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/@iso/lib/firebase/firebase.util.js"],"names":["db","convertCollectionsSnapshotToMap","snapshots","docs","reduce","accumulator","collection","id","data","getNewDocRef","collectionName","doc","addDocument","documentData","add","then","docRef","setDocument","set","getDocuments","get","querySnapshot","map","getDocumentsByQuery","query","console","log","where","deleteDocuments","collectionRef","batch","delete","commit","addCollectionAndDocuments","collectionKey","objectsToAdd","forEach","obj","newDocRef"],"mappings":";;;;;;AAAA,SAASA,EAAT,QAAmB,YAAnB;AACA,OAAO,SAASC,+BAAT,CAAyCC,SAAzC,EAAoD;AACzD,SAAOA,SAAS,CAACC,IAAV,CAAeC,MAAf,CAAsB,CAACC,WAAD,EAAcC,UAAd,KAA6B;AACxDD,IAAAA,WAAW,CAACC,UAAU,CAACC,EAAZ,CAAX,GAA6BD,UAAU,CAACE,IAAX,EAA7B;AACA,WAAOH,WAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID;AACD,OAAO,eAAeI,YAAf,CAA4BC,cAA5B,EAA4C;AACjD,SAAO,MAAMV,EAAE,CAACM,UAAH,CAAcI,cAAd,EAA8BC,GAA9B,EAAb;AACD;AACD,OAAO,eAAeC,WAAf,CAA2BF,cAA3B,EAA2CG,YAA3C,EAAyD;AAC9D,SAAO,MAAMb,EAAE,CACZM,UADU,CACCI,cADD,EAEVI,GAFU,CAEND,YAFM,EAGVE,IAHU,CAGLC,MAAM,IAAIA,MAAM,CAACT,EAHZ,CAAb;AAID;AACD,OAAO,eAAeU,WAAf,CAA2BP,cAA3B,EAA2CM,MAA3C,EAAmDH,YAAnD,EAAiE;AACtE,SAAO,MAAMb,EAAE,CACZM,UADU,CACCI,cADD,EAEVC,GAFU,CAENK,MAFM,EAGVE,GAHU,CAGNL,YAHM,CAAb;AAID;AAED,OAAO,eAAeM,YAAf,CAA4BT,cAA5B,EAA4C;AACjD,SAAO,MAAMV,EAAE,CACZM,UADU,CACCI,cADD,EAEVU,GAFU,GAGVL,IAHU,CAGLM,aAAa,IACjBA,aAAa,CAAClB,IAAd,CAAmBmB,GAAnB,CAAuBX,GAAG;AAAOJ,IAAAA,EAAE,EAAEI,GAAG,CAACJ;AAAf,KAAsBI,GAAG,CAACH,IAAJ,EAAtB,CAA1B,CAJS,CAAb;AAMD;AACD,OAAO,eAAee,mBAAf,CAAmCb,cAAnC,EAAmDc,KAAnD,EAA0D;AAC/DC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAGF,KAAf,EAAsBd,cAAtB,EAAsC,MAAtC;AAEA,SAAO,MAAMV,EAAE,CACZM,UADU,CACCI,cADD,EAEViB,KAFU,CAEJ,GAAGH,KAFC,EAGVJ,GAHU,GAIVL,IAJU,CAILM,aAAa,IACjBA,aAAa,CAAClB,IAAd,CAAmBmB,GAAnB,CAAuBX,GAAG;AAAOJ,IAAAA,EAAE,EAAEI,GAAG,CAACJ;AAAf,KAAsBI,GAAG,CAACH,IAAJ,EAAtB,CAA1B,CALS,CAAb;AAOD;AAED,OAAO,eAAeoB,eAAf,CAA+BlB,cAA/B,EAA+C;AACpD,QAAMmB,aAAa,GAAG7B,EAAE,CAACM,UAAH,CAAcI,cAAd,CAAtB;AACA,MAAIoB,KAAK,GAAG9B,EAAE,CAAC8B,KAAH,EAAZ;AACA,QAAMD,aAAa,CAChBT,GADG,GAEHL,IAFG,CAEEM,aAAa,IACjBA,aAAa,CAAClB,IAAd,CAAmBmB,GAAnB,CAAuBX,GAAG,IAAImB,KAAK,CAACC,MAAN,CAAaF,aAAa,CAAClB,GAAd,CAAkBA,GAAG,CAACJ,EAAtB,CAAb,CAA9B,CAHE,CAAN;AAMA,SAAO,MAAMuB,KAAK,CAACE,MAAN,GAAejB,IAAf,CAAoB,MAAM;AACrCU,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACD,GAFY,CAAb;AAGD;AAED,OAAO,MAAMO,yBAAyB,GAAG,OACvCC,aADuC,EAEvCC,YAFuC,KAGpC;AACH,QAAMN,aAAa,GAAG7B,EAAE,CAACM,UAAH,CAAc4B,aAAd,CAAtB;AACA,QAAMJ,KAAK,GAAG9B,EAAE,CAAC8B,KAAH,EAAd;AACAK,EAAAA,YAAY,CAACC,OAAb,CAAqBC,GAAG,IAAI;AAC1B,UAAMC,SAAS,GAAGT,aAAa,CAAClB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACZ,GAAN,CAAUoB,SAAV,EAAqBD,GAArB;AACD,GAHD;AAIA,SAAO,MAAMP,KAAK,CAACE,MAAN,GAAejB,IAAf,CAAoB,MAAM;AACrCU,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACD,GAFY,CAAb;AAGD,CAbM,C,CAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { db } from './firebase';\r\nexport function convertCollectionsSnapshotToMap(snapshots) {\r\n  return snapshots.docs.reduce((accumulator, collection) => {\r\n    accumulator[collection.id] = collection.data();\r\n    return accumulator;\r\n  }, {});\r\n}\r\nexport async function getNewDocRef(collectionName) {\r\n  return await db.collection(collectionName).doc();\r\n}\r\nexport async function addDocument(collectionName, documentData) {\r\n  return await db\r\n    .collection(collectionName)\r\n    .add(documentData)\r\n    .then(docRef => docRef.id);\r\n}\r\nexport async function setDocument(collectionName, docRef, documentData) {\r\n  return await db\r\n    .collection(collectionName)\r\n    .doc(docRef)\r\n    .set(documentData);\r\n}\r\n\r\nexport async function getDocuments(collectionName) {\r\n  return await db\r\n    .collection(collectionName)\r\n    .get()\r\n    .then(querySnapshot =>\r\n      querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))\r\n    );\r\n}\r\nexport async function getDocumentsByQuery(collectionName, query) {\r\n  console.log(...query, collectionName, 'test');\r\n\r\n  return await db\r\n    .collection(collectionName)\r\n    .where(...query)\r\n    .get()\r\n    .then(querySnapshot =>\r\n      querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))\r\n    );\r\n}\r\n\r\nexport async function deleteDocuments(collectionName) {\r\n  const collectionRef = db.collection(collectionName);\r\n  var batch = db.batch();\r\n  await collectionRef\r\n    .get()\r\n    .then(querySnapshot =>\r\n      querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id)))\r\n    );\r\n\r\n  return await batch.commit().then(() => {\r\n    console.log('Batch Deletion successfully committed!');\r\n  });\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  const collectionRef = db.collection(collectionKey);\r\n  const batch = db.batch();\r\n  objectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, obj);\r\n  });\r\n  return await batch.commit().then(() => {\r\n    console.log('Batch Addition successfully committed!');\r\n  });\r\n};\r\n// const { title, items } = doc.data();\r\n//     return {\r\n//       routeName: encodeURI(title.toLowerCase()),\r\n//       id: doc.id,\r\n//       title,\r\n//       items,\r\n//     };\r\n//   });\r\n//   console.log(transformedCollection);\r\n//   return transformedCollection.reduce((accumulator, collection) => {\r\n//     accumulator[collection.title.toLowerCase()] = collection;\r\n//     return accumulator;\r\n//   }, {});\r\n"]},"metadata":{},"sourceType":"module"}